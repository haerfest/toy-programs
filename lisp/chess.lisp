(defparameter *board*
  (make-array '(8 8) :initial-contents '((BR BN BB BK BQ BB BN BR)
                                         (BP BP BP BP BP BP BP BP)
                                         (-- -- -- -- -- -- -- --)
                                         (-- -- -- -- -- -- -- --)
                                         (-- -- -- -- -- -- -- --)
                                         (-- -- -- -- -- -- -- --)
                                         (WP WP WP WP WP WP WP WP)
                                         (WR WN WB WK WQ WB WN WR))))

(defconstant empty '--)

(defmacro square (board col row)
  `(aref ,board (- 8 ,row) (- (char-code ,col) 65)))

(defun print-board (&optional (board *board*))
  (dotimes (row 8)
    (format t "~A " (- 8 row))
    (dotimes (col 8)
      (format t "~A " (aref board row col)))
    (format t "~%"))
  (format t "   A  B  C  D  E  F  G  H~%"))

(defun read-move ()
  (format t "? ")
  (let ((move (read-line)))
    (if (= 4 (length move))
        (let ((src-col (char-upcase  (char move 0)))
              (src-row (- (char-code (char move 1)) 48))
              (dst-col (char-upcase  (char move 2)))
              (dst-row (- (char-code (char move 3)) 48)))
          (if (and (char<= #\A src-col #\H)
                   (char<= #\A dst-col   #\H)
                   (<= 1 src-row 8)
                   (<= 1 dst-row   8)
                   (not (and (eq src-row dst-row)
                             (eq src-col dst-col)))
                   (not (eq (square *board* src-col src-row) empty)))
              (list src-col src-row dst-col dst-row)
              (read-move)))
        (read-move))))

(defun play-move (move &optional (board *board*))
  (let* ((src-col (elt move 0))
         (src-row (elt move 1))
         (dst-col (elt move 2))
         (dst-row (elt move 3))
         (piece (square board src-col src-row)))
    (setf (square board src-col src-row) empty)
    (setf (square board dst-col dst-row) piece)))

(defun test ()
  (print-board)
  (play-move (read-move))
  (test))
